from fastapi import APIRouter
from app.core.config import settings
from app.core.datamodels import smartContractItem, VulnerabilityItem
from app.utils.utils import save_smart_contract, verify_compilation, clean_prev_compilation
import docker
import json
from app.utils.utils import get_pragma

router = APIRouter()

@router.post("/")
def get_vulnerability(item: smartContractItem):
    
    client = docker.from_env()
    
    containers = client.containers.list(all=True)
    if not any(container.name == settings.SLITHER_CONTAINER_NAME for container in containers):
        container = client.containers.run(
            image="trailofbits/eth-security-toolbox",
            name=settings.SLITHER_CONTAINER_NAME,
            working_dir="/app/backend",
            volumes={
                settings.SLITHER_SC_PATH: {'bind': '/share', 'mode': 'rw'}
            },
            ports={'3000/tcp': 3000},
            environment={"NODE_ENV": "development"},
            detach=True
        )
        
    else:
        container = client.containers.get(settings.SLITHER_CONTAINER_NAME)
        if container.status != 'running':
            container.start()
            
    # Get slither container
    container = client.containers.get(settings.SLITHER_CONTAINER_NAME)
    
    pragma_ver = get_pragma(item.code)
    if not pragma_ver:
        return VulnerabilityItem(success=False, stdout="", stderr="No pragma version found", messages=[])
    
    cleaning_res = clean_prev_compilation()
    if not cleaning_res.success:
        return cleaning_res
    
    save_smart_contract(item.code)

    compilation_res = verify_compilation()
    
    if not compilation_res.success:
        return VulnerabilityItem(success=False, stdout=compilation_res.stdout, stderr="Smart contract does not compile", messages=compilation_res.messages)
    
    container.exec_run(f"solc-select install {pragma_ver}", workdir="/share")
    container.exec_run(f"solc-select use {pragma_ver}", workdir="/share")
    res = container.exec_run(f"test -d {settings.SLITHER_SC_PATH}/node_modules && echo 'exists' || echo 'not_exists'", workdir="/share")
    
    if res.output.decode('utf-8').strip() == 'not_exists':
        container.exec_run(f"npm install", workdir="/share")
        
    result = container.exec_run(f"slither {settings.SC_DEFAULT_NAME}.sol --json -", workdir="/share/contracts")

    return VulnerabilityItem(success=True, stdout=result.output, stderr="", messages=result.output)
