from fastapi import APIRouter
from app.core.config import settings
from app.core.datamodels import smartContractItem, VulnerabilityItem
from app.utils.utils import save_smart_contract, verify_compilation, clean_prev_compilation
import json
from app.utils.utils import get_pragma
from subprocess import Popen, PIPE

router = APIRouter()


@router.post("/")
def get_vulnerability(item: smartContractItem):

    try:
        # Get pragma version
        pragma_ver = get_pragma(item.code)
        if not pragma_ver:
            return VulnerabilityItem(
                success=False,
                messages=["No pragma version found"]
            )

        # Clean previous compilation
        cleaning_res = clean_prev_compilation()
        if not cleaning_res.success:
            return cleaning_res

        # Save smart contract
        save_smart_contract(item.code)

        # Verify compilation
        compilation_res = verify_compilation()
        if not compilation_res.success:
            return VulnerabilityItem(
                success=False,
                messages=compilation_res.messages
            )

        # Run Slither analysis
        try:
            # Run slither as subprocess with Popen
            process = Popen(
                f'slither . --json -',
                cwd=rf"{settings.HARDHAT_PATH}",
                stdout=PIPE,
                stderr=PIPE,
                shell=True,
                text=True
            )

            stdout, stderr = process.communicate()            

            # Parse JSON output
            try:
                json_output = json.loads(stdout)
            except json.JSONDecodeError:
                return VulnerabilityItem(
                    success=False,
                    messages=["Failed to parse Slither output"]
                )

            # logger.info(f"Slither analysis completed successfully")

            return VulnerabilityItem(
                success=True,
                messages=json_output
            )

        except Exception as slither_error:
            # logger.error(
            #     f"Slither analysis failed: {str(slither_error)}", exc_info=True)
            return VulnerabilityItem(
                success=False,
                messages=[str(slither_error)]
            )

    except Exception as e:
        logger.error(
            f"Unexpected error in vulnerability analysis: {str(e)}", exc_info=True)
        return VulnerabilityItem(
            success=False,
            messages=["An unexpected error occurred"]
        )
