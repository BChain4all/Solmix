import * as ast from '../../ast';
import { BasePrinter, PrintFunc } from './base';
export declare class PrinterExpression extends BasePrinter implements Record<`print${ast.ExpressionNodeType}`, PrintFunc<any>> {
    printAssignOp: PrintFunc<ast.AssignOp>;
    printBinaryOperation: PrintFunc<ast.BinaryOperation>;
    printAssignment: PrintFunc<ast.Assignment>;
    printBooleanLiteral: PrintFunc<ast.BooleanLiteral>;
    printConditional: PrintFunc<ast.Conditional>;
    printFunctionCallOptions: PrintFunc<ast.FunctionCallOptions>;
    printFunctionCall: PrintFunc<ast.FunctionCall>;
    printHexStringLiteral: PrintFunc<ast.HexStringLiteral>;
    printIdentifier: PrintFunc<ast.Identifier>;
    printIndexAccess: PrintFunc<ast.IndexAccess>;
    printIndexRangeAccess: PrintFunc<ast.IndexRangeAccess>;
    printInlineArray: PrintFunc<ast.InlineArray>;
    printMemberAccess: PrintFunc<ast.MemberAccess>;
    printMetaType: PrintFunc<ast.MetaType>;
    printNamedArgument: PrintFunc<ast.NamedArgument>;
    printNewExpr: PrintFunc<ast.NewExpr>;
    printNumberLiteral: PrintFunc<ast.NumberLiteral>;
    printPayableConversion: PrintFunc<ast.PayableConversion>;
    printStringLiteral: PrintFunc<ast.StringLiteral>;
    printTupleExpression: PrintFunc<ast.TupleExpression>;
    printUnaryOperation: PrintFunc<ast.UnaryOperation>;
    printUnicodeStringLiteral: PrintFunc<ast.UnicodeStringLiteral>;
    printUserDefinableOperator: PrintFunc<ast.UserDefinableOperator>;
}
