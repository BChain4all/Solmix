import * as ast from '../ast';
import { AstPath, Doc, ParserOptions, Printer } from 'prettier';
export type PrintFunc<T extends ast.SyntaxNode = ast.SyntaxNode> = (arg: {
    path: AstPath<T>;
    options: ParserOptions<T>;
    print: (path: AstPath<ast.SyntaxNode>) => Doc;
    args?: any;
}) => Doc;
export declare class PrettierPrinter implements Printer<any> {
    static name: string;
    print: (path: AstPath<any>, options: ParserOptions<any>, print: (path: AstPath<any>) => import("prettier/doc").builders.Doc, args?: unknown) => import("prettier/doc").builders.Doc;
    printComment: ((commentPath: AstPath<import("./printers/base").CommentToken>, options: ParserOptions<import("./printers/base").CommentToken>) => import("prettier/doc").builders.Doc) | undefined;
    isBlockComment: ((node: import("./printers/base").CommentToken) => boolean) | undefined;
    canAttachComment: ((node: import("./printers/base").CommentToken) => boolean) | undefined;
    massageAstNode: ((node: any, newNode: any, parent: any) => any) | undefined;
    handleComments: {
        ownLine?: ((commentNode: any, text: string, options: ParserOptions<import("./printers/base").CommentToken>, ast: import("./printers/base").CommentToken, isLastComment: boolean) => boolean) | undefined;
        endOfLine?: ((commentNode: any, text: string, options: ParserOptions<import("./printers/base").CommentToken>, ast: import("./printers/base").CommentToken, isLastComment: boolean) => boolean) | undefined;
        remaining?: ((commentNode: any, text: string, options: ParserOptions<import("./printers/base").CommentToken>, ast: import("./printers/base").CommentToken, isLastComment: boolean) => boolean) | undefined;
    } | undefined;
}
