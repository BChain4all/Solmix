import { SymbolAliasesContext, SolidityParserVisitor } from '../../antlr4';
import { ImportAliases } from './import-aliases';
export type SymbolAliases = ImportAliases[];
export declare const SymbolAliases: {
    new (ctx: SymbolAliasesContext, visitor: SolidityParserVisitor<any>): {
        [n: number]: ImportAliases;
        type: "SymbolAliases";
        length: number;
        toString(): string;
        toLocaleString(): string;
        pop(): ImportAliases | undefined;
        push(...items: ImportAliases[]): number;
        concat(...items: ConcatArray<ImportAliases>[]): ImportAliases[];
        concat(...items: (ImportAliases | ConcatArray<ImportAliases>)[]): ImportAliases[];
        join(separator?: string | undefined): string;
        reverse(): ImportAliases[];
        shift(): ImportAliases | undefined;
        slice(start?: number | undefined, end?: number | undefined): ImportAliases[];
        sort(compareFn?: ((a: ImportAliases, b: ImportAliases) => number) | undefined): any;
        splice(start: number, deleteCount?: number | undefined): ImportAliases[];
        splice(start: number, deleteCount: number, ...items: ImportAliases[]): ImportAliases[];
        unshift(...items: ImportAliases[]): number;
        indexOf(searchElement: ImportAliases, fromIndex?: number | undefined): number;
        lastIndexOf(searchElement: ImportAliases, fromIndex?: number | undefined): number;
        every<S extends ImportAliases>(predicate: (value: ImportAliases, index: number, array: ImportAliases[]) => value is S, thisArg?: any): this is S[];
        every(predicate: (value: ImportAliases, index: number, array: ImportAliases[]) => unknown, thisArg?: any): boolean;
        some(predicate: (value: ImportAliases, index: number, array: ImportAliases[]) => unknown, thisArg?: any): boolean;
        forEach(callbackfn: (value: ImportAliases, index: number, array: ImportAliases[]) => void, thisArg?: any): void;
        map<U>(callbackfn: (value: ImportAliases, index: number, array: ImportAliases[]) => U, thisArg?: any): U[];
        filter<S_1 extends ImportAliases>(predicate: (value: ImportAliases, index: number, array: ImportAliases[]) => value is S_1, thisArg?: any): S_1[];
        filter(predicate: (value: ImportAliases, index: number, array: ImportAliases[]) => unknown, thisArg?: any): ImportAliases[];
        reduce(callbackfn: (previousValue: ImportAliases, currentValue: ImportAliases, currentIndex: number, array: ImportAliases[]) => ImportAliases): ImportAliases;
        reduce(callbackfn: (previousValue: ImportAliases, currentValue: ImportAliases, currentIndex: number, array: ImportAliases[]) => ImportAliases, initialValue: ImportAliases): ImportAliases;
        reduce<U_1>(callbackfn: (previousValue: U_1, currentValue: ImportAliases, currentIndex: number, array: ImportAliases[]) => U_1, initialValue: U_1): U_1;
        reduceRight(callbackfn: (previousValue: ImportAliases, currentValue: ImportAliases, currentIndex: number, array: ImportAliases[]) => ImportAliases): ImportAliases;
        reduceRight(callbackfn: (previousValue: ImportAliases, currentValue: ImportAliases, currentIndex: number, array: ImportAliases[]) => ImportAliases, initialValue: ImportAliases): ImportAliases;
        reduceRight<U_2>(callbackfn: (previousValue: U_2, currentValue: ImportAliases, currentIndex: number, array: ImportAliases[]) => U_2, initialValue: U_2): U_2;
        find<S_2 extends ImportAliases>(predicate: (value: ImportAliases, index: number, obj: ImportAliases[]) => value is S_2, thisArg?: any): S_2 | undefined;
        find(predicate: (value: ImportAliases, index: number, obj: ImportAliases[]) => unknown, thisArg?: any): ImportAliases | undefined;
        findIndex(predicate: (value: ImportAliases, index: number, obj: ImportAliases[]) => unknown, thisArg?: any): number;
        fill(value: ImportAliases, start?: number | undefined, end?: number | undefined): any;
        copyWithin(target: number, start?: number | undefined, end?: number | undefined): any;
        entries(): IterableIterator<[number, ImportAliases]>;
        keys(): IterableIterator<number>;
        values(): IterableIterator<ImportAliases>;
        includes(searchElement: ImportAliases, fromIndex?: number | undefined): boolean;
        [Symbol.iterator](): IterableIterator<ImportAliases>;
        readonly [Symbol.unscopables]: {
            [x: number]: boolean | undefined;
            length?: boolean | undefined;
            toString?: boolean | undefined;
            toLocaleString?: boolean | undefined;
            pop?: boolean | undefined;
            push?: boolean | undefined;
            concat?: boolean | undefined;
            join?: boolean | undefined;
            reverse?: boolean | undefined;
            shift?: boolean | undefined;
            slice?: boolean | undefined;
            sort?: boolean | undefined;
            splice?: boolean | undefined;
            unshift?: boolean | undefined;
            indexOf?: boolean | undefined;
            lastIndexOf?: boolean | undefined;
            every?: boolean | undefined;
            some?: boolean | undefined;
            forEach?: boolean | undefined;
            map?: boolean | undefined;
            filter?: boolean | undefined;
            reduce?: boolean | undefined;
            reduceRight?: boolean | undefined;
            find?: boolean | undefined;
            findIndex?: boolean | undefined;
            fill?: boolean | undefined;
            copyWithin?: boolean | undefined;
            entries?: boolean | undefined;
            keys?: boolean | undefined;
            values?: boolean | undefined;
            includes?: boolean | undefined;
            [Symbol.iterator]?: boolean | undefined;
            readonly [Symbol.unscopables]?: boolean | undefined;
        };
    };
    isArray(arg: any): arg is any[];
    from<T>(arrayLike: ArrayLike<T>): T[];
    from<T_1, U_3>(arrayLike: ArrayLike<T_1>, mapfn: (v: T_1, k: number) => U_3, thisArg?: any): U_3[];
    from<T_2>(iterable: Iterable<T_2> | ArrayLike<T_2>): T_2[];
    from<T_3, U_4>(iterable: Iterable<T_3> | ArrayLike<T_3>, mapfn: (v: T_3, k: number) => U_4, thisArg?: any): U_4[];
    of<T_4>(...items: T_4[]): T_4[];
    readonly [Symbol.species]: ArrayConstructor;
};
