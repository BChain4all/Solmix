import { BaseNodeString } from '../base';
import { TypeNameContext, SolidityParserVisitor } from '../../antlr4';
import { Expression } from '../expression';
import { ElementaryTypeName } from './elementary-type-name';
import { FunctionTypeName } from './function-type-name';
import { MappingType } from './mapping-type';
import { IdentifierPath } from '../meta';
declare class TypeNameWithArray extends BaseNodeString {
    type: "TypeName";
    baseType: ElementaryTypeName | FunctionTypeName | MappingType | IdentifierPath;
    expression: Expression | null;
    constructor(ctx: TypeNameContext, visitor: SolidityParserVisitor<any>);
}
export type TypeName = ElementaryTypeName | FunctionTypeName | MappingType | IdentifierPath | TypeNameWithArray;
export declare const TypeName: typeof TypeNameWithArray;
export {};
