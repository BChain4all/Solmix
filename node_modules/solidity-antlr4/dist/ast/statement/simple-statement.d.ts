import { SimpleStatementContext, SolidityParserVisitor } from '../../antlr4';
import { VariableDeclarationStatement } from './variable-declaration-statement';
import { ExpressionStatement } from './expression-statement';
export type SimpleStatement = VariableDeclarationStatement | ExpressionStatement;
export declare const SimpleStatement: {
    new (ctx: SimpleStatementContext, visitor: SolidityParserVisitor<any>): {
        type: "Conditional" | "UnicodeStringLiteral" | "Identifier" | "ContractDefinition" | "EnumDefinition" | "ErrorDefinition" | "EventDefinition" | "FunctionDefinition" | "ModifierDefinition" | "StructDefinition" | "StructMember" | "UserDefinedValueTypeDefinition" | "VariableDeclaration" | "AssignOp" | "Assignment" | "BinaryOperation" | "BooleanLiteral" | "FunctionCallOptions" | "FunctionCall" | "HexStringLiteral" | "IndexAccess" | "IndexRangeAccess" | "InlineArray" | "MemberAccess" | "MetaType" | "NamedArgument" | "NewExpr" | "NumberLiteral" | "PayableConversion" | "StringLiteral" | "TupleExpression" | "UnaryOperation" | "UserDefinableOperator" | "DataLocation" | "IdentifierPath" | "ImportAliases" | "ImportDirective" | "InheritanceSpecifier" | "ModifierInvocation" | "Path" | "PragmaDirective" | "SourceUnit" | "UsingAliases" | "UsingDirective" | "AssemblyStatement" | "Block" | "BreakStatement" | "CatchClause" | "ContinueStatement" | "DoWhileStatement" | "EmitStatement" | "ExpressionStatement" | "ForStatement" | "IfStatement" | "ReturnStatement" | "RevertStatement" | "TryStatement" | "VariableDeclarationStatement" | "WhileStatement" | "ElementaryTypeName" | "FunctionTypeName" | "MappingKeyType" | "MappingType" | "TypeName" | "YulAssignment" | "YulBlock" | "YulBoolean" | "YulForStatement" | "YulFunctionCall" | "YulFunctionDefinition" | "YulIfStatement" | "YulLiteral" | "YulPath" | "YulStatement" | "YulSwitchCase" | "YulSwitchStatement" | "YulVariableDeclaration";
        range: [number, number];
        location: import("../base").Location;
    };
};
