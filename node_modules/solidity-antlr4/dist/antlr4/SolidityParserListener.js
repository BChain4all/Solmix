export class SolidityParserListener {
  /**
   * Enter a parse tree produced by `SolidityParser.sourceUnit`.
   * @param ctx the parse tree
   */
  enterSourceUnit;
  /**
   * Exit a parse tree produced by `SolidityParser.sourceUnit`.
   * @param ctx the parse tree
   */
  exitSourceUnit;
  /**
   * Enter a parse tree produced by `SolidityParser.pragmaDirective`.
   * @param ctx the parse tree
   */
  enterPragmaDirective;
  /**
   * Exit a parse tree produced by `SolidityParser.pragmaDirective`.
   * @param ctx the parse tree
   */
  exitPragmaDirective;
  /**
   * Enter a parse tree produced by `SolidityParser.importDirective`.
   * @param ctx the parse tree
   */
  enterImportDirective;
  /**
   * Exit a parse tree produced by `SolidityParser.importDirective`.
   * @param ctx the parse tree
   */
  exitImportDirective;
  /**
   * Enter a parse tree produced by `SolidityParser.importAliases`.
   * @param ctx the parse tree
   */
  enterImportAliases;
  /**
   * Exit a parse tree produced by `SolidityParser.importAliases`.
   * @param ctx the parse tree
   */
  exitImportAliases;
  /**
   * Enter a parse tree produced by `SolidityParser.path`.
   * @param ctx the parse tree
   */
  enterPath;
  /**
   * Exit a parse tree produced by `SolidityParser.path`.
   * @param ctx the parse tree
   */
  exitPath;
  /**
   * Enter a parse tree produced by `SolidityParser.symbolAliases`.
   * @param ctx the parse tree
   */
  enterSymbolAliases;
  /**
   * Exit a parse tree produced by `SolidityParser.symbolAliases`.
   * @param ctx the parse tree
   */
  exitSymbolAliases;
  /**
   * Enter a parse tree produced by `SolidityParser.contractDefinition`.
   * @param ctx the parse tree
   */
  enterContractDefinition;
  /**
   * Exit a parse tree produced by `SolidityParser.contractDefinition`.
   * @param ctx the parse tree
   */
  exitContractDefinition;
  /**
   * Enter a parse tree produced by `SolidityParser.interfaceDefinition`.
   * @param ctx the parse tree
   */
  enterInterfaceDefinition;
  /**
   * Exit a parse tree produced by `SolidityParser.interfaceDefinition`.
   * @param ctx the parse tree
   */
  exitInterfaceDefinition;
  /**
   * Enter a parse tree produced by `SolidityParser.libraryDefinition`.
   * @param ctx the parse tree
   */
  enterLibraryDefinition;
  /**
   * Exit a parse tree produced by `SolidityParser.libraryDefinition`.
   * @param ctx the parse tree
   */
  exitLibraryDefinition;
  /**
   * Enter a parse tree produced by `SolidityParser.inheritanceSpecifierList`.
   * @param ctx the parse tree
   */
  enterInheritanceSpecifierList;
  /**
   * Exit a parse tree produced by `SolidityParser.inheritanceSpecifierList`.
   * @param ctx the parse tree
   */
  exitInheritanceSpecifierList;
  /**
   * Enter a parse tree produced by `SolidityParser.inheritanceSpecifier`.
   * @param ctx the parse tree
   */
  enterInheritanceSpecifier;
  /**
   * Exit a parse tree produced by `SolidityParser.inheritanceSpecifier`.
   * @param ctx the parse tree
   */
  exitInheritanceSpecifier;
  /**
   * Enter a parse tree produced by `SolidityParser.contractBodyElement`.
   * @param ctx the parse tree
   */
  enterContractBodyElement;
  /**
   * Exit a parse tree produced by `SolidityParser.contractBodyElement`.
   * @param ctx the parse tree
   */
  exitContractBodyElement;
  /**
   * Enter a parse tree produced by `SolidityParser.namedArgument`.
   * @param ctx the parse tree
   */
  enterNamedArgument;
  /**
   * Exit a parse tree produced by `SolidityParser.namedArgument`.
   * @param ctx the parse tree
   */
  exitNamedArgument;
  /**
   * Enter a parse tree produced by `SolidityParser.callArgumentList`.
   * @param ctx the parse tree
   */
  enterCallArgumentList;
  /**
   * Exit a parse tree produced by `SolidityParser.callArgumentList`.
   * @param ctx the parse tree
   */
  exitCallArgumentList;
  /**
   * Enter a parse tree produced by `SolidityParser.identifierPath`.
   * @param ctx the parse tree
   */
  enterIdentifierPath;
  /**
   * Exit a parse tree produced by `SolidityParser.identifierPath`.
   * @param ctx the parse tree
   */
  exitIdentifierPath;
  /**
   * Enter a parse tree produced by `SolidityParser.modifierInvocation`.
   * @param ctx the parse tree
   */
  enterModifierInvocation;
  /**
   * Exit a parse tree produced by `SolidityParser.modifierInvocation`.
   * @param ctx the parse tree
   */
  exitModifierInvocation;
  /**
   * Enter a parse tree produced by `SolidityParser.visibility`.
   * @param ctx the parse tree
   */
  enterVisibility;
  /**
   * Exit a parse tree produced by `SolidityParser.visibility`.
   * @param ctx the parse tree
   */
  exitVisibility;
  /**
   * Enter a parse tree produced by `SolidityParser.parameterList`.
   * @param ctx the parse tree
   */
  enterParameterList;
  /**
   * Exit a parse tree produced by `SolidityParser.parameterList`.
   * @param ctx the parse tree
   */
  exitParameterList;
  /**
   * Enter a parse tree produced by `SolidityParser.parameterDeclaration`.
   * @param ctx the parse tree
   */
  enterParameterDeclaration;
  /**
   * Exit a parse tree produced by `SolidityParser.parameterDeclaration`.
   * @param ctx the parse tree
   */
  exitParameterDeclaration;
  /**
   * Enter a parse tree produced by `SolidityParser.constructorDefinition`.
   * @param ctx the parse tree
   */
  enterConstructorDefinition;
  /**
   * Exit a parse tree produced by `SolidityParser.constructorDefinition`.
   * @param ctx the parse tree
   */
  exitConstructorDefinition;
  /**
   * Enter a parse tree produced by `SolidityParser.stateMutability`.
   * @param ctx the parse tree
   */
  enterStateMutability;
  /**
   * Exit a parse tree produced by `SolidityParser.stateMutability`.
   * @param ctx the parse tree
   */
  exitStateMutability;
  /**
   * Enter a parse tree produced by `SolidityParser.overrideSpecifier`.
   * @param ctx the parse tree
   */
  enterOverrideSpecifier;
  /**
   * Exit a parse tree produced by `SolidityParser.overrideSpecifier`.
   * @param ctx the parse tree
   */
  exitOverrideSpecifier;
  /**
   * Enter a parse tree produced by `SolidityParser.functionDefinition`.
   * @param ctx the parse tree
   */
  enterFunctionDefinition;
  /**
   * Exit a parse tree produced by `SolidityParser.functionDefinition`.
   * @param ctx the parse tree
   */
  exitFunctionDefinition;
  /**
   * Enter a parse tree produced by `SolidityParser.modifierDefinition`.
   * @param ctx the parse tree
   */
  enterModifierDefinition;
  /**
   * Exit a parse tree produced by `SolidityParser.modifierDefinition`.
   * @param ctx the parse tree
   */
  exitModifierDefinition;
  /**
   * Enter a parse tree produced by `SolidityParser.fallbackFunctionDefinition`.
   * @param ctx the parse tree
   */
  enterFallbackFunctionDefinition;
  /**
   * Exit a parse tree produced by `SolidityParser.fallbackFunctionDefinition`.
   * @param ctx the parse tree
   */
  exitFallbackFunctionDefinition;
  /**
   * Enter a parse tree produced by `SolidityParser.receiveFunctionDefinition`.
   * @param ctx the parse tree
   */
  enterReceiveFunctionDefinition;
  /**
   * Exit a parse tree produced by `SolidityParser.receiveFunctionDefinition`.
   * @param ctx the parse tree
   */
  exitReceiveFunctionDefinition;
  /**
   * Enter a parse tree produced by `SolidityParser.structDefinition`.
   * @param ctx the parse tree
   */
  enterStructDefinition;
  /**
   * Exit a parse tree produced by `SolidityParser.structDefinition`.
   * @param ctx the parse tree
   */
  exitStructDefinition;
  /**
   * Enter a parse tree produced by `SolidityParser.structMember`.
   * @param ctx the parse tree
   */
  enterStructMember;
  /**
   * Exit a parse tree produced by `SolidityParser.structMember`.
   * @param ctx the parse tree
   */
  exitStructMember;
  /**
   * Enter a parse tree produced by `SolidityParser.enumDefinition`.
   * @param ctx the parse tree
   */
  enterEnumDefinition;
  /**
   * Exit a parse tree produced by `SolidityParser.enumDefinition`.
   * @param ctx the parse tree
   */
  exitEnumDefinition;
  /**
   * Enter a parse tree produced by `SolidityParser.userDefinedValueTypeDefinition`.
   * @param ctx the parse tree
   */
  enterUserDefinedValueTypeDefinition;
  /**
   * Exit a parse tree produced by `SolidityParser.userDefinedValueTypeDefinition`.
   * @param ctx the parse tree
   */
  exitUserDefinedValueTypeDefinition;
  /**
   * Enter a parse tree produced by `SolidityParser.stateVariableDeclaration`.
   * @param ctx the parse tree
   */
  enterStateVariableDeclaration;
  /**
   * Exit a parse tree produced by `SolidityParser.stateVariableDeclaration`.
   * @param ctx the parse tree
   */
  exitStateVariableDeclaration;
  /**
   * Enter a parse tree produced by `SolidityParser.constantVariableDeclaration`.
   * @param ctx the parse tree
   */
  enterConstantVariableDeclaration;
  /**
   * Exit a parse tree produced by `SolidityParser.constantVariableDeclaration`.
   * @param ctx the parse tree
   */
  exitConstantVariableDeclaration;
  /**
   * Enter a parse tree produced by `SolidityParser.eventParameter`.
   * @param ctx the parse tree
   */
  enterEventParameter;
  /**
   * Exit a parse tree produced by `SolidityParser.eventParameter`.
   * @param ctx the parse tree
   */
  exitEventParameter;
  /**
   * Enter a parse tree produced by `SolidityParser.eventDefinition`.
   * @param ctx the parse tree
   */
  enterEventDefinition;
  /**
   * Exit a parse tree produced by `SolidityParser.eventDefinition`.
   * @param ctx the parse tree
   */
  exitEventDefinition;
  /**
   * Enter a parse tree produced by `SolidityParser.errorParameter`.
   * @param ctx the parse tree
   */
  enterErrorParameter;
  /**
   * Exit a parse tree produced by `SolidityParser.errorParameter`.
   * @param ctx the parse tree
   */
  exitErrorParameter;
  /**
   * Enter a parse tree produced by `SolidityParser.errorDefinition`.
   * @param ctx the parse tree
   */
  enterErrorDefinition;
  /**
   * Exit a parse tree produced by `SolidityParser.errorDefinition`.
   * @param ctx the parse tree
   */
  exitErrorDefinition;
  /**
   * Enter a parse tree produced by `SolidityParser.userDefinableOperator`.
   * @param ctx the parse tree
   */
  enterUserDefinableOperator;
  /**
   * Exit a parse tree produced by `SolidityParser.userDefinableOperator`.
   * @param ctx the parse tree
   */
  exitUserDefinableOperator;
  /**
   * Enter a parse tree produced by `SolidityParser.usingDirective`.
   * @param ctx the parse tree
   */
  enterUsingDirective;
  /**
   * Exit a parse tree produced by `SolidityParser.usingDirective`.
   * @param ctx the parse tree
   */
  exitUsingDirective;
  /**
   * Enter a parse tree produced by `SolidityParser.usingAliases`.
   * @param ctx the parse tree
   */
  enterUsingAliases;
  /**
   * Exit a parse tree produced by `SolidityParser.usingAliases`.
   * @param ctx the parse tree
   */
  exitUsingAliases;
  /**
   * Enter a parse tree produced by `SolidityParser.typeName`.
   * @param ctx the parse tree
   */
  enterTypeName;
  /**
   * Exit a parse tree produced by `SolidityParser.typeName`.
   * @param ctx the parse tree
   */
  exitTypeName;
  /**
   * Enter a parse tree produced by `SolidityParser.elementaryTypeName`.
   * @param ctx the parse tree
   */
  enterElementaryTypeName;
  /**
   * Exit a parse tree produced by `SolidityParser.elementaryTypeName`.
   * @param ctx the parse tree
   */
  exitElementaryTypeName;
  /**
   * Enter a parse tree produced by `SolidityParser.functionTypeName`.
   * @param ctx the parse tree
   */
  enterFunctionTypeName;
  /**
   * Exit a parse tree produced by `SolidityParser.functionTypeName`.
   * @param ctx the parse tree
   */
  exitFunctionTypeName;
  /**
   * Enter a parse tree produced by `SolidityParser.variableDeclaration`.
   * @param ctx the parse tree
   */
  enterVariableDeclaration;
  /**
   * Exit a parse tree produced by `SolidityParser.variableDeclaration`.
   * @param ctx the parse tree
   */
  exitVariableDeclaration;
  /**
   * Enter a parse tree produced by `SolidityParser.dataLocation`.
   * @param ctx the parse tree
   */
  enterDataLocation;
  /**
   * Exit a parse tree produced by `SolidityParser.dataLocation`.
   * @param ctx the parse tree
   */
  exitDataLocation;
  /**
   * Enter a parse tree produced by the `UnaryPrefixOperation`
   * labeled alternative in `SolidityParser.expression`.
   * @param ctx the parse tree
   */
  enterUnaryPrefixOperation;
  /**
   * Exit a parse tree produced by the `UnaryPrefixOperation`
   * labeled alternative in `SolidityParser.expression`.
   * @param ctx the parse tree
   */
  exitUnaryPrefixOperation;
  /**
   * Enter a parse tree produced by the `PrimaryExpression`
   * labeled alternative in `SolidityParser.expression`.
   * @param ctx the parse tree
   */
  enterPrimaryExpression;
  /**
   * Exit a parse tree produced by the `PrimaryExpression`
   * labeled alternative in `SolidityParser.expression`.
   * @param ctx the parse tree
   */
  exitPrimaryExpression;
  /**
   * Enter a parse tree produced by the `OrderComparison`
   * labeled alternative in `SolidityParser.expression`.
   * @param ctx the parse tree
   */
  enterOrderComparison;
  /**
   * Exit a parse tree produced by the `OrderComparison`
   * labeled alternative in `SolidityParser.expression`.
   * @param ctx the parse tree
   */
  exitOrderComparison;
  /**
   * Enter a parse tree produced by the `Conditional`
   * labeled alternative in `SolidityParser.expression`.
   * @param ctx the parse tree
   */
  enterConditional;
  /**
   * Exit a parse tree produced by the `Conditional`
   * labeled alternative in `SolidityParser.expression`.
   * @param ctx the parse tree
   */
  exitConditional;
  /**
   * Enter a parse tree produced by the `PayableConversion`
   * labeled alternative in `SolidityParser.expression`.
   * @param ctx the parse tree
   */
  enterPayableConversion;
  /**
   * Exit a parse tree produced by the `PayableConversion`
   * labeled alternative in `SolidityParser.expression`.
   * @param ctx the parse tree
   */
  exitPayableConversion;
  /**
   * Enter a parse tree produced by the `Assignment`
   * labeled alternative in `SolidityParser.expression`.
   * @param ctx the parse tree
   */
  enterAssignment;
  /**
   * Exit a parse tree produced by the `Assignment`
   * labeled alternative in `SolidityParser.expression`.
   * @param ctx the parse tree
   */
  exitAssignment;
  /**
   * Enter a parse tree produced by the `UnarySuffixOperation`
   * labeled alternative in `SolidityParser.expression`.
   * @param ctx the parse tree
   */
  enterUnarySuffixOperation;
  /**
   * Exit a parse tree produced by the `UnarySuffixOperation`
   * labeled alternative in `SolidityParser.expression`.
   * @param ctx the parse tree
   */
  exitUnarySuffixOperation;
  /**
   * Enter a parse tree produced by the `ShiftOperation`
   * labeled alternative in `SolidityParser.expression`.
   * @param ctx the parse tree
   */
  enterShiftOperation;
  /**
   * Exit a parse tree produced by the `ShiftOperation`
   * labeled alternative in `SolidityParser.expression`.
   * @param ctx the parse tree
   */
  exitShiftOperation;
  /**
   * Enter a parse tree produced by the `BitAndOperation`
   * labeled alternative in `SolidityParser.expression`.
   * @param ctx the parse tree
   */
  enterBitAndOperation;
  /**
   * Exit a parse tree produced by the `BitAndOperation`
   * labeled alternative in `SolidityParser.expression`.
   * @param ctx the parse tree
   */
  exitBitAndOperation;
  /**
   * Enter a parse tree produced by the `FunctionCall`
   * labeled alternative in `SolidityParser.expression`.
   * @param ctx the parse tree
   */
  enterFunctionCall;
  /**
   * Exit a parse tree produced by the `FunctionCall`
   * labeled alternative in `SolidityParser.expression`.
   * @param ctx the parse tree
   */
  exitFunctionCall;
  /**
   * Enter a parse tree produced by the `IndexRangeAccess`
   * labeled alternative in `SolidityParser.expression`.
   * @param ctx the parse tree
   */
  enterIndexRangeAccess;
  /**
   * Exit a parse tree produced by the `IndexRangeAccess`
   * labeled alternative in `SolidityParser.expression`.
   * @param ctx the parse tree
   */
  exitIndexRangeAccess;
  /**
   * Enter a parse tree produced by the `IndexAccess`
   * labeled alternative in `SolidityParser.expression`.
   * @param ctx the parse tree
   */
  enterIndexAccess;
  /**
   * Exit a parse tree produced by the `IndexAccess`
   * labeled alternative in `SolidityParser.expression`.
   * @param ctx the parse tree
   */
  exitIndexAccess;
  /**
   * Enter a parse tree produced by the `AddSubOperation`
   * labeled alternative in `SolidityParser.expression`.
   * @param ctx the parse tree
   */
  enterAddSubOperation;
  /**
   * Exit a parse tree produced by the `AddSubOperation`
   * labeled alternative in `SolidityParser.expression`.
   * @param ctx the parse tree
   */
  exitAddSubOperation;
  /**
   * Enter a parse tree produced by the `BitOrOperation`
   * labeled alternative in `SolidityParser.expression`.
   * @param ctx the parse tree
   */
  enterBitOrOperation;
  /**
   * Exit a parse tree produced by the `BitOrOperation`
   * labeled alternative in `SolidityParser.expression`.
   * @param ctx the parse tree
   */
  exitBitOrOperation;
  /**
   * Enter a parse tree produced by the `ExpOperation`
   * labeled alternative in `SolidityParser.expression`.
   * @param ctx the parse tree
   */
  enterExpOperation;
  /**
   * Exit a parse tree produced by the `ExpOperation`
   * labeled alternative in `SolidityParser.expression`.
   * @param ctx the parse tree
   */
  exitExpOperation;
  /**
   * Enter a parse tree produced by the `AndOperation`
   * labeled alternative in `SolidityParser.expression`.
   * @param ctx the parse tree
   */
  enterAndOperation;
  /**
   * Exit a parse tree produced by the `AndOperation`
   * labeled alternative in `SolidityParser.expression`.
   * @param ctx the parse tree
   */
  exitAndOperation;
  /**
   * Enter a parse tree produced by the `InlineArray`
   * labeled alternative in `SolidityParser.expression`.
   * @param ctx the parse tree
   */
  enterInlineArray;
  /**
   * Exit a parse tree produced by the `InlineArray`
   * labeled alternative in `SolidityParser.expression`.
   * @param ctx the parse tree
   */
  exitInlineArray;
  /**
   * Enter a parse tree produced by the `OrOperation`
   * labeled alternative in `SolidityParser.expression`.
   * @param ctx the parse tree
   */
  enterOrOperation;
  /**
   * Exit a parse tree produced by the `OrOperation`
   * labeled alternative in `SolidityParser.expression`.
   * @param ctx the parse tree
   */
  exitOrOperation;
  /**
   * Enter a parse tree produced by the `MemberAccess`
   * labeled alternative in `SolidityParser.expression`.
   * @param ctx the parse tree
   */
  enterMemberAccess;
  /**
   * Exit a parse tree produced by the `MemberAccess`
   * labeled alternative in `SolidityParser.expression`.
   * @param ctx the parse tree
   */
  exitMemberAccess;
  /**
   * Enter a parse tree produced by the `MulDivModOperation`
   * labeled alternative in `SolidityParser.expression`.
   * @param ctx the parse tree
   */
  enterMulDivModOperation;
  /**
   * Exit a parse tree produced by the `MulDivModOperation`
   * labeled alternative in `SolidityParser.expression`.
   * @param ctx the parse tree
   */
  exitMulDivModOperation;
  /**
   * Enter a parse tree produced by the `FunctionCallOptions`
   * labeled alternative in `SolidityParser.expression`.
   * @param ctx the parse tree
   */
  enterFunctionCallOptions;
  /**
   * Exit a parse tree produced by the `FunctionCallOptions`
   * labeled alternative in `SolidityParser.expression`.
   * @param ctx the parse tree
   */
  exitFunctionCallOptions;
  /**
   * Enter a parse tree produced by the `NewExpr`
   * labeled alternative in `SolidityParser.expression`.
   * @param ctx the parse tree
   */
  enterNewExpr;
  /**
   * Exit a parse tree produced by the `NewExpr`
   * labeled alternative in `SolidityParser.expression`.
   * @param ctx the parse tree
   */
  exitNewExpr;
  /**
   * Enter a parse tree produced by the `BitXorOperation`
   * labeled alternative in `SolidityParser.expression`.
   * @param ctx the parse tree
   */
  enterBitXorOperation;
  /**
   * Exit a parse tree produced by the `BitXorOperation`
   * labeled alternative in `SolidityParser.expression`.
   * @param ctx the parse tree
   */
  exitBitXorOperation;
  /**
   * Enter a parse tree produced by the `Tuple`
   * labeled alternative in `SolidityParser.expression`.
   * @param ctx the parse tree
   */
  enterTuple;
  /**
   * Exit a parse tree produced by the `Tuple`
   * labeled alternative in `SolidityParser.expression`.
   * @param ctx the parse tree
   */
  exitTuple;
  /**
   * Enter a parse tree produced by the `EqualityComparison`
   * labeled alternative in `SolidityParser.expression`.
   * @param ctx the parse tree
   */
  enterEqualityComparison;
  /**
   * Exit a parse tree produced by the `EqualityComparison`
   * labeled alternative in `SolidityParser.expression`.
   * @param ctx the parse tree
   */
  exitEqualityComparison;
  /**
   * Enter a parse tree produced by the `MetaType`
   * labeled alternative in `SolidityParser.expression`.
   * @param ctx the parse tree
   */
  enterMetaType;
  /**
   * Exit a parse tree produced by the `MetaType`
   * labeled alternative in `SolidityParser.expression`.
   * @param ctx the parse tree
   */
  exitMetaType;
  /**
   * Enter a parse tree produced by `SolidityParser.assignOp`.
   * @param ctx the parse tree
   */
  enterAssignOp;
  /**
   * Exit a parse tree produced by `SolidityParser.assignOp`.
   * @param ctx the parse tree
   */
  exitAssignOp;
  /**
   * Enter a parse tree produced by `SolidityParser.tupleExpression`.
   * @param ctx the parse tree
   */
  enterTupleExpression;
  /**
   * Exit a parse tree produced by `SolidityParser.tupleExpression`.
   * @param ctx the parse tree
   */
  exitTupleExpression;
  /**
   * Enter a parse tree produced by `SolidityParser.inlineArrayExpression`.
   * @param ctx the parse tree
   */
  enterInlineArrayExpression;
  /**
   * Exit a parse tree produced by `SolidityParser.inlineArrayExpression`.
   * @param ctx the parse tree
   */
  exitInlineArrayExpression;
  /**
   * Enter a parse tree produced by `SolidityParser.identifier`.
   * @param ctx the parse tree
   */
  enterIdentifier;
  /**
   * Exit a parse tree produced by `SolidityParser.identifier`.
   * @param ctx the parse tree
   */
  exitIdentifier;
  /**
   * Enter a parse tree produced by `SolidityParser.literal`.
   * @param ctx the parse tree
   */
  enterLiteral;
  /**
   * Exit a parse tree produced by `SolidityParser.literal`.
   * @param ctx the parse tree
   */
  exitLiteral;
  /**
   * Enter a parse tree produced by `SolidityParser.literalWithSubDenomination`.
   * @param ctx the parse tree
   */
  enterLiteralWithSubDenomination;
  /**
   * Exit a parse tree produced by `SolidityParser.literalWithSubDenomination`.
   * @param ctx the parse tree
   */
  exitLiteralWithSubDenomination;
  /**
   * Enter a parse tree produced by `SolidityParser.booleanLiteral`.
   * @param ctx the parse tree
   */
  enterBooleanLiteral;
  /**
   * Exit a parse tree produced by `SolidityParser.booleanLiteral`.
   * @param ctx the parse tree
   */
  exitBooleanLiteral;
  /**
   * Enter a parse tree produced by `SolidityParser.stringLiteral`.
   * @param ctx the parse tree
   */
  enterStringLiteral;
  /**
   * Exit a parse tree produced by `SolidityParser.stringLiteral`.
   * @param ctx the parse tree
   */
  exitStringLiteral;
  /**
   * Enter a parse tree produced by `SolidityParser.hexStringLiteral`.
   * @param ctx the parse tree
   */
  enterHexStringLiteral;
  /**
   * Exit a parse tree produced by `SolidityParser.hexStringLiteral`.
   * @param ctx the parse tree
   */
  exitHexStringLiteral;
  /**
   * Enter a parse tree produced by `SolidityParser.unicodeStringLiteral`.
   * @param ctx the parse tree
   */
  enterUnicodeStringLiteral;
  /**
   * Exit a parse tree produced by `SolidityParser.unicodeStringLiteral`.
   * @param ctx the parse tree
   */
  exitUnicodeStringLiteral;
  /**
   * Enter a parse tree produced by `SolidityParser.numberLiteral`.
   * @param ctx the parse tree
   */
  enterNumberLiteral;
  /**
   * Exit a parse tree produced by `SolidityParser.numberLiteral`.
   * @param ctx the parse tree
   */
  exitNumberLiteral;
  /**
   * Enter a parse tree produced by `SolidityParser.block`.
   * @param ctx the parse tree
   */
  enterBlock;
  /**
   * Exit a parse tree produced by `SolidityParser.block`.
   * @param ctx the parse tree
   */
  exitBlock;
  /**
   * Enter a parse tree produced by `SolidityParser.uncheckedBlock`.
   * @param ctx the parse tree
   */
  enterUncheckedBlock;
  /**
   * Exit a parse tree produced by `SolidityParser.uncheckedBlock`.
   * @param ctx the parse tree
   */
  exitUncheckedBlock;
  /**
   * Enter a parse tree produced by `SolidityParser.statement`.
   * @param ctx the parse tree
   */
  enterStatement;
  /**
   * Exit a parse tree produced by `SolidityParser.statement`.
   * @param ctx the parse tree
   */
  exitStatement;
  /**
   * Enter a parse tree produced by `SolidityParser.simpleStatement`.
   * @param ctx the parse tree
   */
  enterSimpleStatement;
  /**
   * Exit a parse tree produced by `SolidityParser.simpleStatement`.
   * @param ctx the parse tree
   */
  exitSimpleStatement;
  /**
   * Enter a parse tree produced by `SolidityParser.ifStatement`.
   * @param ctx the parse tree
   */
  enterIfStatement;
  /**
   * Exit a parse tree produced by `SolidityParser.ifStatement`.
   * @param ctx the parse tree
   */
  exitIfStatement;
  /**
   * Enter a parse tree produced by `SolidityParser.forStatement`.
   * @param ctx the parse tree
   */
  enterForStatement;
  /**
   * Exit a parse tree produced by `SolidityParser.forStatement`.
   * @param ctx the parse tree
   */
  exitForStatement;
  /**
   * Enter a parse tree produced by `SolidityParser.whileStatement`.
   * @param ctx the parse tree
   */
  enterWhileStatement;
  /**
   * Exit a parse tree produced by `SolidityParser.whileStatement`.
   * @param ctx the parse tree
   */
  exitWhileStatement;
  /**
   * Enter a parse tree produced by `SolidityParser.doWhileStatement`.
   * @param ctx the parse tree
   */
  enterDoWhileStatement;
  /**
   * Exit a parse tree produced by `SolidityParser.doWhileStatement`.
   * @param ctx the parse tree
   */
  exitDoWhileStatement;
  /**
   * Enter a parse tree produced by `SolidityParser.continueStatement`.
   * @param ctx the parse tree
   */
  enterContinueStatement;
  /**
   * Exit a parse tree produced by `SolidityParser.continueStatement`.
   * @param ctx the parse tree
   */
  exitContinueStatement;
  /**
   * Enter a parse tree produced by `SolidityParser.breakStatement`.
   * @param ctx the parse tree
   */
  enterBreakStatement;
  /**
   * Exit a parse tree produced by `SolidityParser.breakStatement`.
   * @param ctx the parse tree
   */
  exitBreakStatement;
  /**
   * Enter a parse tree produced by `SolidityParser.tryStatement`.
   * @param ctx the parse tree
   */
  enterTryStatement;
  /**
   * Exit a parse tree produced by `SolidityParser.tryStatement`.
   * @param ctx the parse tree
   */
  exitTryStatement;
  /**
   * Enter a parse tree produced by `SolidityParser.catchClause`.
   * @param ctx the parse tree
   */
  enterCatchClause;
  /**
   * Exit a parse tree produced by `SolidityParser.catchClause`.
   * @param ctx the parse tree
   */
  exitCatchClause;
  /**
   * Enter a parse tree produced by `SolidityParser.returnStatement`.
   * @param ctx the parse tree
   */
  enterReturnStatement;
  /**
   * Exit a parse tree produced by `SolidityParser.returnStatement`.
   * @param ctx the parse tree
   */
  exitReturnStatement;
  /**
   * Enter a parse tree produced by `SolidityParser.emitStatement`.
   * @param ctx the parse tree
   */
  enterEmitStatement;
  /**
   * Exit a parse tree produced by `SolidityParser.emitStatement`.
   * @param ctx the parse tree
   */
  exitEmitStatement;
  /**
   * Enter a parse tree produced by `SolidityParser.revertStatement`.
   * @param ctx the parse tree
   */
  enterRevertStatement;
  /**
   * Exit a parse tree produced by `SolidityParser.revertStatement`.
   * @param ctx the parse tree
   */
  exitRevertStatement;
  /**
   * Enter a parse tree produced by `SolidityParser.assemblyStatement`.
   * @param ctx the parse tree
   */
  enterAssemblyStatement;
  /**
   * Exit a parse tree produced by `SolidityParser.assemblyStatement`.
   * @param ctx the parse tree
   */
  exitAssemblyStatement;
  /**
   * Enter a parse tree produced by `SolidityParser.assemblyFlags`.
   * @param ctx the parse tree
   */
  enterAssemblyFlags;
  /**
   * Exit a parse tree produced by `SolidityParser.assemblyFlags`.
   * @param ctx the parse tree
   */
  exitAssemblyFlags;
  /**
   * Enter a parse tree produced by `SolidityParser.variableDeclarationList`.
   * @param ctx the parse tree
   */
  enterVariableDeclarationList;
  /**
   * Exit a parse tree produced by `SolidityParser.variableDeclarationList`.
   * @param ctx the parse tree
   */
  exitVariableDeclarationList;
  /**
   * Enter a parse tree produced by `SolidityParser.variableDeclarationTuple`.
   * @param ctx the parse tree
   */
  enterVariableDeclarationTuple;
  /**
   * Exit a parse tree produced by `SolidityParser.variableDeclarationTuple`.
   * @param ctx the parse tree
   */
  exitVariableDeclarationTuple;
  /**
   * Enter a parse tree produced by `SolidityParser.variableDeclarationStatement`.
   * @param ctx the parse tree
   */
  enterVariableDeclarationStatement;
  /**
   * Exit a parse tree produced by `SolidityParser.variableDeclarationStatement`.
   * @param ctx the parse tree
   */
  exitVariableDeclarationStatement;
  /**
   * Enter a parse tree produced by `SolidityParser.expressionStatement`.
   * @param ctx the parse tree
   */
  enterExpressionStatement;
  /**
   * Exit a parse tree produced by `SolidityParser.expressionStatement`.
   * @param ctx the parse tree
   */
  exitExpressionStatement;
  /**
   * Enter a parse tree produced by `SolidityParser.mappingType`.
   * @param ctx the parse tree
   */
  enterMappingType;
  /**
   * Exit a parse tree produced by `SolidityParser.mappingType`.
   * @param ctx the parse tree
   */
  exitMappingType;
  /**
   * Enter a parse tree produced by `SolidityParser.mappingKeyType`.
   * @param ctx the parse tree
   */
  enterMappingKeyType;
  /**
   * Exit a parse tree produced by `SolidityParser.mappingKeyType`.
   * @param ctx the parse tree
   */
  exitMappingKeyType;
  /**
   * Enter a parse tree produced by `SolidityParser.yulStatement`.
   * @param ctx the parse tree
   */
  enterYulStatement;
  /**
   * Exit a parse tree produced by `SolidityParser.yulStatement`.
   * @param ctx the parse tree
   */
  exitYulStatement;
  /**
   * Enter a parse tree produced by `SolidityParser.yulBlock`.
   * @param ctx the parse tree
   */
  enterYulBlock;
  /**
   * Exit a parse tree produced by `SolidityParser.yulBlock`.
   * @param ctx the parse tree
   */
  exitYulBlock;
  /**
   * Enter a parse tree produced by `SolidityParser.yulVariableDeclaration`.
   * @param ctx the parse tree
   */
  enterYulVariableDeclaration;
  /**
   * Exit a parse tree produced by `SolidityParser.yulVariableDeclaration`.
   * @param ctx the parse tree
   */
  exitYulVariableDeclaration;
  /**
   * Enter a parse tree produced by `SolidityParser.yulAssignment`.
   * @param ctx the parse tree
   */
  enterYulAssignment;
  /**
   * Exit a parse tree produced by `SolidityParser.yulAssignment`.
   * @param ctx the parse tree
   */
  exitYulAssignment;
  /**
   * Enter a parse tree produced by `SolidityParser.yulIfStatement`.
   * @param ctx the parse tree
   */
  enterYulIfStatement;
  /**
   * Exit a parse tree produced by `SolidityParser.yulIfStatement`.
   * @param ctx the parse tree
   */
  exitYulIfStatement;
  /**
   * Enter a parse tree produced by `SolidityParser.yulForStatement`.
   * @param ctx the parse tree
   */
  enterYulForStatement;
  /**
   * Exit a parse tree produced by `SolidityParser.yulForStatement`.
   * @param ctx the parse tree
   */
  exitYulForStatement;
  /**
   * Enter a parse tree produced by `SolidityParser.yulSwitchCase`.
   * @param ctx the parse tree
   */
  enterYulSwitchCase;
  /**
   * Exit a parse tree produced by `SolidityParser.yulSwitchCase`.
   * @param ctx the parse tree
   */
  exitYulSwitchCase;
  /**
   * Enter a parse tree produced by `SolidityParser.yulSwitchStatement`.
   * @param ctx the parse tree
   */
  enterYulSwitchStatement;
  /**
   * Exit a parse tree produced by `SolidityParser.yulSwitchStatement`.
   * @param ctx the parse tree
   */
  exitYulSwitchStatement;
  /**
   * Enter a parse tree produced by `SolidityParser.yulFunctionDefinition`.
   * @param ctx the parse tree
   */
  enterYulFunctionDefinition;
  /**
   * Exit a parse tree produced by `SolidityParser.yulFunctionDefinition`.
   * @param ctx the parse tree
   */
  exitYulFunctionDefinition;
  /**
   * Enter a parse tree produced by `SolidityParser.yulPath`.
   * @param ctx the parse tree
   */
  enterYulPath;
  /**
   * Exit a parse tree produced by `SolidityParser.yulPath`.
   * @param ctx the parse tree
   */
  exitYulPath;
  /**
   * Enter a parse tree produced by `SolidityParser.yulFunctionCall`.
   * @param ctx the parse tree
   */
  enterYulFunctionCall;
  /**
   * Exit a parse tree produced by `SolidityParser.yulFunctionCall`.
   * @param ctx the parse tree
   */
  exitYulFunctionCall;
  /**
   * Enter a parse tree produced by `SolidityParser.yulBoolean`.
   * @param ctx the parse tree
   */
  enterYulBoolean;
  /**
   * Exit a parse tree produced by `SolidityParser.yulBoolean`.
   * @param ctx the parse tree
   */
  exitYulBoolean;
  /**
   * Enter a parse tree produced by `SolidityParser.yulLiteral`.
   * @param ctx the parse tree
   */
  enterYulLiteral;
  /**
   * Exit a parse tree produced by `SolidityParser.yulLiteral`.
   * @param ctx the parse tree
   */
  exitYulLiteral;
  /**
   * Enter a parse tree produced by `SolidityParser.yulExpression`.
   * @param ctx the parse tree
   */
  enterYulExpression;
  /**
   * Exit a parse tree produced by `SolidityParser.yulExpression`.
   * @param ctx the parse tree
   */
  exitYulExpression;
  visitTerminal(node) {
  }
  visitErrorNode(node) {
  }
  enterEveryRule(node) {
  }
  exitEveryRule(node) {
  }
}
