import { AbstractParseTreeVisitor } from "antlr4ng";
export class SolidityParserVisitor extends AbstractParseTreeVisitor {
  /**
   * Visit a parse tree produced by `SolidityParser.sourceUnit`.
   * @param ctx the parse tree
   * @return the visitor result
   */
  visitSourceUnit;
  /**
   * Visit a parse tree produced by `SolidityParser.pragmaDirective`.
   * @param ctx the parse tree
   * @return the visitor result
   */
  visitPragmaDirective;
  /**
   * Visit a parse tree produced by `SolidityParser.importDirective`.
   * @param ctx the parse tree
   * @return the visitor result
   */
  visitImportDirective;
  /**
   * Visit a parse tree produced by `SolidityParser.importAliases`.
   * @param ctx the parse tree
   * @return the visitor result
   */
  visitImportAliases;
  /**
   * Visit a parse tree produced by `SolidityParser.path`.
   * @param ctx the parse tree
   * @return the visitor result
   */
  visitPath;
  /**
   * Visit a parse tree produced by `SolidityParser.symbolAliases`.
   * @param ctx the parse tree
   * @return the visitor result
   */
  visitSymbolAliases;
  /**
   * Visit a parse tree produced by `SolidityParser.contractDefinition`.
   * @param ctx the parse tree
   * @return the visitor result
   */
  visitContractDefinition;
  /**
   * Visit a parse tree produced by `SolidityParser.interfaceDefinition`.
   * @param ctx the parse tree
   * @return the visitor result
   */
  visitInterfaceDefinition;
  /**
   * Visit a parse tree produced by `SolidityParser.libraryDefinition`.
   * @param ctx the parse tree
   * @return the visitor result
   */
  visitLibraryDefinition;
  /**
   * Visit a parse tree produced by `SolidityParser.inheritanceSpecifierList`.
   * @param ctx the parse tree
   * @return the visitor result
   */
  visitInheritanceSpecifierList;
  /**
   * Visit a parse tree produced by `SolidityParser.inheritanceSpecifier`.
   * @param ctx the parse tree
   * @return the visitor result
   */
  visitInheritanceSpecifier;
  /**
   * Visit a parse tree produced by `SolidityParser.contractBodyElement`.
   * @param ctx the parse tree
   * @return the visitor result
   */
  visitContractBodyElement;
  /**
   * Visit a parse tree produced by `SolidityParser.namedArgument`.
   * @param ctx the parse tree
   * @return the visitor result
   */
  visitNamedArgument;
  /**
   * Visit a parse tree produced by `SolidityParser.callArgumentList`.
   * @param ctx the parse tree
   * @return the visitor result
   */
  visitCallArgumentList;
  /**
   * Visit a parse tree produced by `SolidityParser.identifierPath`.
   * @param ctx the parse tree
   * @return the visitor result
   */
  visitIdentifierPath;
  /**
   * Visit a parse tree produced by `SolidityParser.modifierInvocation`.
   * @param ctx the parse tree
   * @return the visitor result
   */
  visitModifierInvocation;
  /**
   * Visit a parse tree produced by `SolidityParser.visibility`.
   * @param ctx the parse tree
   * @return the visitor result
   */
  visitVisibility;
  /**
   * Visit a parse tree produced by `SolidityParser.parameterList`.
   * @param ctx the parse tree
   * @return the visitor result
   */
  visitParameterList;
  /**
   * Visit a parse tree produced by `SolidityParser.parameterDeclaration`.
   * @param ctx the parse tree
   * @return the visitor result
   */
  visitParameterDeclaration;
  /**
   * Visit a parse tree produced by `SolidityParser.constructorDefinition`.
   * @param ctx the parse tree
   * @return the visitor result
   */
  visitConstructorDefinition;
  /**
   * Visit a parse tree produced by `SolidityParser.stateMutability`.
   * @param ctx the parse tree
   * @return the visitor result
   */
  visitStateMutability;
  /**
   * Visit a parse tree produced by `SolidityParser.overrideSpecifier`.
   * @param ctx the parse tree
   * @return the visitor result
   */
  visitOverrideSpecifier;
  /**
   * Visit a parse tree produced by `SolidityParser.functionDefinition`.
   * @param ctx the parse tree
   * @return the visitor result
   */
  visitFunctionDefinition;
  /**
   * Visit a parse tree produced by `SolidityParser.modifierDefinition`.
   * @param ctx the parse tree
   * @return the visitor result
   */
  visitModifierDefinition;
  /**
   * Visit a parse tree produced by `SolidityParser.fallbackFunctionDefinition`.
   * @param ctx the parse tree
   * @return the visitor result
   */
  visitFallbackFunctionDefinition;
  /**
   * Visit a parse tree produced by `SolidityParser.receiveFunctionDefinition`.
   * @param ctx the parse tree
   * @return the visitor result
   */
  visitReceiveFunctionDefinition;
  /**
   * Visit a parse tree produced by `SolidityParser.structDefinition`.
   * @param ctx the parse tree
   * @return the visitor result
   */
  visitStructDefinition;
  /**
   * Visit a parse tree produced by `SolidityParser.structMember`.
   * @param ctx the parse tree
   * @return the visitor result
   */
  visitStructMember;
  /**
   * Visit a parse tree produced by `SolidityParser.enumDefinition`.
   * @param ctx the parse tree
   * @return the visitor result
   */
  visitEnumDefinition;
  /**
   * Visit a parse tree produced by `SolidityParser.userDefinedValueTypeDefinition`.
   * @param ctx the parse tree
   * @return the visitor result
   */
  visitUserDefinedValueTypeDefinition;
  /**
   * Visit a parse tree produced by `SolidityParser.stateVariableDeclaration`.
   * @param ctx the parse tree
   * @return the visitor result
   */
  visitStateVariableDeclaration;
  /**
   * Visit a parse tree produced by `SolidityParser.constantVariableDeclaration`.
   * @param ctx the parse tree
   * @return the visitor result
   */
  visitConstantVariableDeclaration;
  /**
   * Visit a parse tree produced by `SolidityParser.eventParameter`.
   * @param ctx the parse tree
   * @return the visitor result
   */
  visitEventParameter;
  /**
   * Visit a parse tree produced by `SolidityParser.eventDefinition`.
   * @param ctx the parse tree
   * @return the visitor result
   */
  visitEventDefinition;
  /**
   * Visit a parse tree produced by `SolidityParser.errorParameter`.
   * @param ctx the parse tree
   * @return the visitor result
   */
  visitErrorParameter;
  /**
   * Visit a parse tree produced by `SolidityParser.errorDefinition`.
   * @param ctx the parse tree
   * @return the visitor result
   */
  visitErrorDefinition;
  /**
   * Visit a parse tree produced by `SolidityParser.userDefinableOperator`.
   * @param ctx the parse tree
   * @return the visitor result
   */
  visitUserDefinableOperator;
  /**
   * Visit a parse tree produced by `SolidityParser.usingDirective`.
   * @param ctx the parse tree
   * @return the visitor result
   */
  visitUsingDirective;
  /**
   * Visit a parse tree produced by `SolidityParser.usingAliases`.
   * @param ctx the parse tree
   * @return the visitor result
   */
  visitUsingAliases;
  /**
   * Visit a parse tree produced by `SolidityParser.typeName`.
   * @param ctx the parse tree
   * @return the visitor result
   */
  visitTypeName;
  /**
   * Visit a parse tree produced by `SolidityParser.elementaryTypeName`.
   * @param ctx the parse tree
   * @return the visitor result
   */
  visitElementaryTypeName;
  /**
   * Visit a parse tree produced by `SolidityParser.functionTypeName`.
   * @param ctx the parse tree
   * @return the visitor result
   */
  visitFunctionTypeName;
  /**
   * Visit a parse tree produced by `SolidityParser.variableDeclaration`.
   * @param ctx the parse tree
   * @return the visitor result
   */
  visitVariableDeclaration;
  /**
   * Visit a parse tree produced by `SolidityParser.dataLocation`.
   * @param ctx the parse tree
   * @return the visitor result
   */
  visitDataLocation;
  /**
   * Visit a parse tree produced by the `UnaryPrefixOperation`
   * labeled alternative in `SolidityParser.expression`.
   * @param ctx the parse tree
   * @return the visitor result
   */
  visitUnaryPrefixOperation;
  /**
   * Visit a parse tree produced by the `PrimaryExpression`
   * labeled alternative in `SolidityParser.expression`.
   * @param ctx the parse tree
   * @return the visitor result
   */
  visitPrimaryExpression;
  /**
   * Visit a parse tree produced by the `OrderComparison`
   * labeled alternative in `SolidityParser.expression`.
   * @param ctx the parse tree
   * @return the visitor result
   */
  visitOrderComparison;
  /**
   * Visit a parse tree produced by the `Conditional`
   * labeled alternative in `SolidityParser.expression`.
   * @param ctx the parse tree
   * @return the visitor result
   */
  visitConditional;
  /**
   * Visit a parse tree produced by the `PayableConversion`
   * labeled alternative in `SolidityParser.expression`.
   * @param ctx the parse tree
   * @return the visitor result
   */
  visitPayableConversion;
  /**
   * Visit a parse tree produced by the `Assignment`
   * labeled alternative in `SolidityParser.expression`.
   * @param ctx the parse tree
   * @return the visitor result
   */
  visitAssignment;
  /**
   * Visit a parse tree produced by the `UnarySuffixOperation`
   * labeled alternative in `SolidityParser.expression`.
   * @param ctx the parse tree
   * @return the visitor result
   */
  visitUnarySuffixOperation;
  /**
   * Visit a parse tree produced by the `ShiftOperation`
   * labeled alternative in `SolidityParser.expression`.
   * @param ctx the parse tree
   * @return the visitor result
   */
  visitShiftOperation;
  /**
   * Visit a parse tree produced by the `BitAndOperation`
   * labeled alternative in `SolidityParser.expression`.
   * @param ctx the parse tree
   * @return the visitor result
   */
  visitBitAndOperation;
  /**
   * Visit a parse tree produced by the `FunctionCall`
   * labeled alternative in `SolidityParser.expression`.
   * @param ctx the parse tree
   * @return the visitor result
   */
  visitFunctionCall;
  /**
   * Visit a parse tree produced by the `IndexRangeAccess`
   * labeled alternative in `SolidityParser.expression`.
   * @param ctx the parse tree
   * @return the visitor result
   */
  visitIndexRangeAccess;
  /**
   * Visit a parse tree produced by the `IndexAccess`
   * labeled alternative in `SolidityParser.expression`.
   * @param ctx the parse tree
   * @return the visitor result
   */
  visitIndexAccess;
  /**
   * Visit a parse tree produced by the `AddSubOperation`
   * labeled alternative in `SolidityParser.expression`.
   * @param ctx the parse tree
   * @return the visitor result
   */
  visitAddSubOperation;
  /**
   * Visit a parse tree produced by the `BitOrOperation`
   * labeled alternative in `SolidityParser.expression`.
   * @param ctx the parse tree
   * @return the visitor result
   */
  visitBitOrOperation;
  /**
   * Visit a parse tree produced by the `ExpOperation`
   * labeled alternative in `SolidityParser.expression`.
   * @param ctx the parse tree
   * @return the visitor result
   */
  visitExpOperation;
  /**
   * Visit a parse tree produced by the `AndOperation`
   * labeled alternative in `SolidityParser.expression`.
   * @param ctx the parse tree
   * @return the visitor result
   */
  visitAndOperation;
  /**
   * Visit a parse tree produced by the `InlineArray`
   * labeled alternative in `SolidityParser.expression`.
   * @param ctx the parse tree
   * @return the visitor result
   */
  visitInlineArray;
  /**
   * Visit a parse tree produced by the `OrOperation`
   * labeled alternative in `SolidityParser.expression`.
   * @param ctx the parse tree
   * @return the visitor result
   */
  visitOrOperation;
  /**
   * Visit a parse tree produced by the `MemberAccess`
   * labeled alternative in `SolidityParser.expression`.
   * @param ctx the parse tree
   * @return the visitor result
   */
  visitMemberAccess;
  /**
   * Visit a parse tree produced by the `MulDivModOperation`
   * labeled alternative in `SolidityParser.expression`.
   * @param ctx the parse tree
   * @return the visitor result
   */
  visitMulDivModOperation;
  /**
   * Visit a parse tree produced by the `FunctionCallOptions`
   * labeled alternative in `SolidityParser.expression`.
   * @param ctx the parse tree
   * @return the visitor result
   */
  visitFunctionCallOptions;
  /**
   * Visit a parse tree produced by the `NewExpr`
   * labeled alternative in `SolidityParser.expression`.
   * @param ctx the parse tree
   * @return the visitor result
   */
  visitNewExpr;
  /**
   * Visit a parse tree produced by the `BitXorOperation`
   * labeled alternative in `SolidityParser.expression`.
   * @param ctx the parse tree
   * @return the visitor result
   */
  visitBitXorOperation;
  /**
   * Visit a parse tree produced by the `Tuple`
   * labeled alternative in `SolidityParser.expression`.
   * @param ctx the parse tree
   * @return the visitor result
   */
  visitTuple;
  /**
   * Visit a parse tree produced by the `EqualityComparison`
   * labeled alternative in `SolidityParser.expression`.
   * @param ctx the parse tree
   * @return the visitor result
   */
  visitEqualityComparison;
  /**
   * Visit a parse tree produced by the `MetaType`
   * labeled alternative in `SolidityParser.expression`.
   * @param ctx the parse tree
   * @return the visitor result
   */
  visitMetaType;
  /**
   * Visit a parse tree produced by `SolidityParser.assignOp`.
   * @param ctx the parse tree
   * @return the visitor result
   */
  visitAssignOp;
  /**
   * Visit a parse tree produced by `SolidityParser.tupleExpression`.
   * @param ctx the parse tree
   * @return the visitor result
   */
  visitTupleExpression;
  /**
   * Visit a parse tree produced by `SolidityParser.inlineArrayExpression`.
   * @param ctx the parse tree
   * @return the visitor result
   */
  visitInlineArrayExpression;
  /**
   * Visit a parse tree produced by `SolidityParser.identifier`.
   * @param ctx the parse tree
   * @return the visitor result
   */
  visitIdentifier;
  /**
   * Visit a parse tree produced by `SolidityParser.literal`.
   * @param ctx the parse tree
   * @return the visitor result
   */
  visitLiteral;
  /**
   * Visit a parse tree produced by `SolidityParser.literalWithSubDenomination`.
   * @param ctx the parse tree
   * @return the visitor result
   */
  visitLiteralWithSubDenomination;
  /**
   * Visit a parse tree produced by `SolidityParser.booleanLiteral`.
   * @param ctx the parse tree
   * @return the visitor result
   */
  visitBooleanLiteral;
  /**
   * Visit a parse tree produced by `SolidityParser.stringLiteral`.
   * @param ctx the parse tree
   * @return the visitor result
   */
  visitStringLiteral;
  /**
   * Visit a parse tree produced by `SolidityParser.hexStringLiteral`.
   * @param ctx the parse tree
   * @return the visitor result
   */
  visitHexStringLiteral;
  /**
   * Visit a parse tree produced by `SolidityParser.unicodeStringLiteral`.
   * @param ctx the parse tree
   * @return the visitor result
   */
  visitUnicodeStringLiteral;
  /**
   * Visit a parse tree produced by `SolidityParser.numberLiteral`.
   * @param ctx the parse tree
   * @return the visitor result
   */
  visitNumberLiteral;
  /**
   * Visit a parse tree produced by `SolidityParser.block`.
   * @param ctx the parse tree
   * @return the visitor result
   */
  visitBlock;
  /**
   * Visit a parse tree produced by `SolidityParser.uncheckedBlock`.
   * @param ctx the parse tree
   * @return the visitor result
   */
  visitUncheckedBlock;
  /**
   * Visit a parse tree produced by `SolidityParser.statement`.
   * @param ctx the parse tree
   * @return the visitor result
   */
  visitStatement;
  /**
   * Visit a parse tree produced by `SolidityParser.simpleStatement`.
   * @param ctx the parse tree
   * @return the visitor result
   */
  visitSimpleStatement;
  /**
   * Visit a parse tree produced by `SolidityParser.ifStatement`.
   * @param ctx the parse tree
   * @return the visitor result
   */
  visitIfStatement;
  /**
   * Visit a parse tree produced by `SolidityParser.forStatement`.
   * @param ctx the parse tree
   * @return the visitor result
   */
  visitForStatement;
  /**
   * Visit a parse tree produced by `SolidityParser.whileStatement`.
   * @param ctx the parse tree
   * @return the visitor result
   */
  visitWhileStatement;
  /**
   * Visit a parse tree produced by `SolidityParser.doWhileStatement`.
   * @param ctx the parse tree
   * @return the visitor result
   */
  visitDoWhileStatement;
  /**
   * Visit a parse tree produced by `SolidityParser.continueStatement`.
   * @param ctx the parse tree
   * @return the visitor result
   */
  visitContinueStatement;
  /**
   * Visit a parse tree produced by `SolidityParser.breakStatement`.
   * @param ctx the parse tree
   * @return the visitor result
   */
  visitBreakStatement;
  /**
   * Visit a parse tree produced by `SolidityParser.tryStatement`.
   * @param ctx the parse tree
   * @return the visitor result
   */
  visitTryStatement;
  /**
   * Visit a parse tree produced by `SolidityParser.catchClause`.
   * @param ctx the parse tree
   * @return the visitor result
   */
  visitCatchClause;
  /**
   * Visit a parse tree produced by `SolidityParser.returnStatement`.
   * @param ctx the parse tree
   * @return the visitor result
   */
  visitReturnStatement;
  /**
   * Visit a parse tree produced by `SolidityParser.emitStatement`.
   * @param ctx the parse tree
   * @return the visitor result
   */
  visitEmitStatement;
  /**
   * Visit a parse tree produced by `SolidityParser.revertStatement`.
   * @param ctx the parse tree
   * @return the visitor result
   */
  visitRevertStatement;
  /**
   * Visit a parse tree produced by `SolidityParser.assemblyStatement`.
   * @param ctx the parse tree
   * @return the visitor result
   */
  visitAssemblyStatement;
  /**
   * Visit a parse tree produced by `SolidityParser.assemblyFlags`.
   * @param ctx the parse tree
   * @return the visitor result
   */
  visitAssemblyFlags;
  /**
   * Visit a parse tree produced by `SolidityParser.variableDeclarationList`.
   * @param ctx the parse tree
   * @return the visitor result
   */
  visitVariableDeclarationList;
  /**
   * Visit a parse tree produced by `SolidityParser.variableDeclarationTuple`.
   * @param ctx the parse tree
   * @return the visitor result
   */
  visitVariableDeclarationTuple;
  /**
   * Visit a parse tree produced by `SolidityParser.variableDeclarationStatement`.
   * @param ctx the parse tree
   * @return the visitor result
   */
  visitVariableDeclarationStatement;
  /**
   * Visit a parse tree produced by `SolidityParser.expressionStatement`.
   * @param ctx the parse tree
   * @return the visitor result
   */
  visitExpressionStatement;
  /**
   * Visit a parse tree produced by `SolidityParser.mappingType`.
   * @param ctx the parse tree
   * @return the visitor result
   */
  visitMappingType;
  /**
   * Visit a parse tree produced by `SolidityParser.mappingKeyType`.
   * @param ctx the parse tree
   * @return the visitor result
   */
  visitMappingKeyType;
  /**
   * Visit a parse tree produced by `SolidityParser.yulStatement`.
   * @param ctx the parse tree
   * @return the visitor result
   */
  visitYulStatement;
  /**
   * Visit a parse tree produced by `SolidityParser.yulBlock`.
   * @param ctx the parse tree
   * @return the visitor result
   */
  visitYulBlock;
  /**
   * Visit a parse tree produced by `SolidityParser.yulVariableDeclaration`.
   * @param ctx the parse tree
   * @return the visitor result
   */
  visitYulVariableDeclaration;
  /**
   * Visit a parse tree produced by `SolidityParser.yulAssignment`.
   * @param ctx the parse tree
   * @return the visitor result
   */
  visitYulAssignment;
  /**
   * Visit a parse tree produced by `SolidityParser.yulIfStatement`.
   * @param ctx the parse tree
   * @return the visitor result
   */
  visitYulIfStatement;
  /**
   * Visit a parse tree produced by `SolidityParser.yulForStatement`.
   * @param ctx the parse tree
   * @return the visitor result
   */
  visitYulForStatement;
  /**
   * Visit a parse tree produced by `SolidityParser.yulSwitchCase`.
   * @param ctx the parse tree
   * @return the visitor result
   */
  visitYulSwitchCase;
  /**
   * Visit a parse tree produced by `SolidityParser.yulSwitchStatement`.
   * @param ctx the parse tree
   * @return the visitor result
   */
  visitYulSwitchStatement;
  /**
   * Visit a parse tree produced by `SolidityParser.yulFunctionDefinition`.
   * @param ctx the parse tree
   * @return the visitor result
   */
  visitYulFunctionDefinition;
  /**
   * Visit a parse tree produced by `SolidityParser.yulPath`.
   * @param ctx the parse tree
   * @return the visitor result
   */
  visitYulPath;
  /**
   * Visit a parse tree produced by `SolidityParser.yulFunctionCall`.
   * @param ctx the parse tree
   * @return the visitor result
   */
  visitYulFunctionCall;
  /**
   * Visit a parse tree produced by `SolidityParser.yulBoolean`.
   * @param ctx the parse tree
   * @return the visitor result
   */
  visitYulBoolean;
  /**
   * Visit a parse tree produced by `SolidityParser.yulLiteral`.
   * @param ctx the parse tree
   * @return the visitor result
   */
  visitYulLiteral;
  /**
   * Visit a parse tree produced by `SolidityParser.yulExpression`.
   * @param ctx the parse tree
   * @return the visitor result
   */
  visitYulExpression;
}
