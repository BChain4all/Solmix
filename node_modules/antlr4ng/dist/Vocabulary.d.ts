export declare class Vocabulary {
    static readonly EMPTY_NAMES: string[];
    /**
     * Gets an empty {@link Vocabulary} instance.
     *
     * <p>
     * No literal or symbol names are assigned to token types, so
     * {@link #getDisplayName(int)} returns the numeric value for all tokens
     * except {@link Token#EOF}.</p>
     */
    static readonly EMPTY_VOCABULARY: Vocabulary;
    readonly maxTokenType: number;
    private readonly literalNames;
    private readonly symbolicNames;
    private readonly displayNames;
    /**
     * Constructs a new instance of {@link Vocabulary} from the specified
     * literal, symbolic, and display token names.
     *
     * @param literalNames The literal names assigned to tokens, or {@code null}
     * if no literal names are assigned.
     * @param symbolicNames The symbolic names assigned to tokens, or
     * {@code null} if no symbolic names are assigned.
     * @param displayNames The display names assigned to tokens, or {@code null}
     * to use the values in {@code literalNames} and {@code symbolicNames} as
     * the source of display names, as described in
     * {@link #getDisplayName(int)}.
     */
    constructor(literalNames: Array<string | null>, symbolicNames: Array<string | null>, displayNames?: Array<string | null> | null);
    /**
     * Returns a {@link Vocabulary} instance from the specified set of token
     * names. This method acts as a compatibility layer for the single
     * {@code tokenNames} array generated by previous releases of ANTLR.
     *
     * <p>The resulting vocabulary instance returns {@code null} for
     * {@link #getLiteralName(int)} and {@link #getSymbolicName(int)}, and the
     * value from {@code tokenNames} for the display names.</p>
     *
     * @param tokenNames The token names, or {@code null} if no token names are
     * available.
     * @returns A {@link Vocabulary} instance which uses {@code tokenNames} for
     * the display names of tokens.
     */
    static fromTokenNames(tokenNames: Array<string | null> | null): Vocabulary;
    getMaxTokenType(): number;
    getLiteralName(tokenType: number): string | null;
    getSymbolicName(tokenType: number): string | null;
    getDisplayName(tokenType: number): string | null;
    getLiteralNames(): Array<string | null>;
    getSymbolicNames(): Array<string | null>;
    getDisplayNames(): Array<string | null>;
}
