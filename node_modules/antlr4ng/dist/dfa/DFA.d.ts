import { DFAState } from "./DFAState.js";
import { Vocabulary } from "../Vocabulary.js";
import { DecisionState } from "../atn/DecisionState.js";
import { HashSet } from "../misc/HashSet.js";
export declare class DFA {
    /**
     * A set of all DFA states. Use {@link Map} so we can get old state back
     *  ({@link Set} only allows you to see if it's there).
     */
    readonly states: HashSet<DFAState>;
    s0: DFAState | null;
    readonly decision: number;
    /** From which ATN state did we create this DFA? */
    readonly atnStartState: DecisionState | null;
    /**
     * {@code true} if this DFA is for a precedence decision; otherwise,
     * {@code false}. This is the backing field for {@link #isPrecedenceDfa}.
     */
    readonly precedenceDfa: boolean;
    constructor(atnStartState: DecisionState | null, decision?: number);
    /**
     * Gets whether this DFA is a precedence DFA. Precedence DFAs use a special
     * start state {@link #s0} which is not stored in {@link #states}. The
     * {@link DFAState#edges} array for this start state contains outgoing edges
     * supplying individual start states corresponding to specific precedence
     * values.
     *
      @returns `true` if this is a precedence DFA; otherwise,
     * {@code false}.
     * @see Parser#getPrecedence()
     */
    readonly isPrecedenceDfa: () => boolean;
    /**
     * Get the start state for a specific precedence value.
     *
     * @param precedence The current precedence.
      @returns The start state corresponding to the specified precedence, or
     * {@code null} if no start state exists for the specified precedence.
     *
     * @throws IllegalStateException if this is not a precedence DFA.
     * @see #isPrecedenceDfa()
     */
    readonly getPrecedenceStartState: (precedence: number) => DFAState | null;
    /**
     * Set the start state for a specific precedence value.
     *
     * @param precedence The current precedence.
     * @param startState The start state corresponding to the specified
     * precedence.
     *
     * @throws IllegalStateException if this is not a precedence DFA.
     * @see #isPrecedenceDfa()
     */
    readonly setPrecedenceStartState: (precedence: number, startState: DFAState) => void;
    /**
     * Sets whether this is a precedence DFA.
     *
     * @param precedenceDfa {@code true} if this is a precedence DFA; otherwise,
     * {@code false}
     *
     * @throws UnsupportedOperationException if {@code precedenceDfa} does not
     * match the value of {@link #isPrecedenceDfa} for the current DFA.
     *
     * @deprecated This method no longer performs any action.
     */
    setPrecedenceDfa(precedenceDfa: boolean): void;
    /**
     * @returns a list of all states in this DFA, ordered by state number.
     */
    getStates(): DFAState[];
    toString(vocabulary?: Vocabulary): string;
    toLexerString(): string;
}
