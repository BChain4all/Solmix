import { ATN } from "./ATN.js";
import { IntervalSet } from "../misc/IntervalSet.js";
import { ATNDeserializationOptions } from "./ATNDeserializationOptions.js";
import { ATNState } from "./ATNState.js";
import { LexerAction } from "./LexerAction.js";
import { Transition } from "./Transition.js";
export declare class ATNDeserializer {
    static readonly SERIALIZED_VERSION = 4;
    private data;
    private pos;
    private readonly deserializationOptions;
    private stateFactories;
    private actionFactories;
    constructor(options?: ATNDeserializationOptions);
    deserialize(data: number[]): ATN;
    reset(data: number[]): boolean;
    checkVersion(): void;
    readATN(): ATN;
    readStates(atn: ATN): void;
    readRules(atn: ATN): void;
    readModes(atn: ATN): void;
    readSets(atn: ATN, sets: IntervalSet[]): void;
    readEdges(atn: ATN, sets: IntervalSet[]): void;
    readDecisions(atn: ATN): void;
    readLexerActions(atn: ATN): void;
    generateRuleBypassTransitions(atn: ATN): void;
    generateRuleBypassTransition(atn: ATN, idx: number): void;
    stateIsEndStateFor(state: ATNState, idx: number): ATNState | null;
    /**
     * Analyze the {@link StarLoopEntryState} states in the specified ATN to set
     * the {@link StarLoopEntryState} field to the correct value.
     *
     * @param atn The ATN.
     */
    markPrecedenceDecisions(atn: ATN): void;
    verifyATN(atn: ATN): void;
    checkCondition(condition: boolean, message?: string): void;
    readInt(): number;
    edgeFactory(atn: ATN, type: number, trg: number, arg1: number, arg2: number, arg3: number, sets: IntervalSet[]): Transition;
    stateFactory(type: number, ruleIndex: number): ATNState | null;
    lexerActionFactory(type: number, data1: number, data2: number): LexerAction;
}
