import { Recognizer } from "../Recognizer.js";
import { HashCode } from "../misc/HashCode.js";
import { ATNSimulator } from "./ATNSimulator.js";
export declare abstract class PredictionContext {
    /**
     * Represents {@code $} in an array in full context mode, when {@code $}
     * doesn't mean wildcard: {@code $ + x = [$,x]}. Here,
     * {@code $} = {@link EMPTY_RETURN_STATE}.
     */
    static readonly EMPTY_RETURN_STATE = 2147483647;
    static EMPTY: PredictionContext;
    static trace_atn_sim: boolean;
    private cachedHashCode;
    constructor(cachedHashCode: number);
    isEmpty(): boolean;
    hasEmptyPath(): boolean;
    hashCode(): number;
    updateHashCode(hash: HashCode): void;
    toString(_recog?: Recognizer<ATNSimulator>): string;
    abstract getParent(index: number): PredictionContext | null;
    abstract getReturnState(index: number): number;
    abstract get length(): number;
    abstract equals(obj: unknown): boolean;
}
