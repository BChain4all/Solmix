import { IntervalSet } from "../misc/IntervalSet.js";
import { ATNState } from "./ATNState.js";
/**
 * An ATN transition between any two ATN states.  Subclasses define
 * atom, set, epsilon, action, predicate, rule transitions.
 *
 * <p>This is a one way link.  It emanates from a state (usually via a list of
 * transitions) and has a target state.</p>
 *
 * <p>Since we never have to change the ATN transitions once we construct it,
 * we can fix these transitions as specific classes. The DFA transitions
 * on the other hand need to update the labels as it adds transitions to
 * the states. We'll use the term Edge for the DFA to distinguish them from
 * ATN transitions.</p>
 */
export declare abstract class Transition {
    static readonly serializationNames: string[];
    /** The target of this transition. */
    target: ATNState;
    constructor(target: ATNState);
    /**
     * Determines if the transition is an "epsilon" transition.
     *
     * <p>The default implementation returns {@code false}.</p>
     *
     * @returns `true` if traversing this transition in the ATN does not
     * consume an input symbol; otherwise, {@code false} if traversing this
     * transition consumes (matches) an input symbol.
     */
    get isEpsilon(): boolean;
    get label(): IntervalSet | null;
    abstract get serializationType(): number;
    abstract matches(symbol: number, minVocabSymbol: number, maxVocabSymbol: number): boolean;
}
