import { ATNConfig } from "./ATNConfig.js";
import { LexerActionExecutor } from "./LexerActionExecutor.js";
import { ATNState } from "./ATNState.js";
import { PredictionContext } from "./PredictionContext.js";
import { HashCode } from "../misc/HashCode.js";
export interface ILexerATNConfigParameters {
    state: ATNState | null;
    alt?: number | null;
    context?: PredictionContext | null;
    lexerActionExecutor?: LexerActionExecutor | null;
}
export declare class LexerATNConfig extends ATNConfig {
    /**
     * This is the backing field for {@link #getLexerActionExecutor}.
     */
    readonly lexerActionExecutor: LexerActionExecutor | null;
    readonly passedThroughNonGreedyDecision: boolean;
    constructor(params: ILexerATNConfigParameters, config: LexerATNConfig | null);
    updateHashCode(hash: HashCode): void;
    equals(other: unknown): boolean;
    hashCodeForConfigSet(): number;
    equalsForConfigSet(other: unknown): boolean;
    checkNonGreedyDecision(source: LexerATNConfig, target: ATNState): boolean;
}
